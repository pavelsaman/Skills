{
	"info": {
		"_postman_id": "993cdb5d-3ce8-4cc4-92f1-a8b67e965761",
		"name": "Skills - category_name validation",
		"description": "Data entries length etc.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Adding a new category - category_name validation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dea67f45-12c8-4ec7-a135-0ebbf7c5e93e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aace879d-4449-475f-9d1a-2a22cedb50b9",
						"exec": [
							"const expected_status_code = pm.variables.get(\"expected_status\");\r",
							"pm.test(`Status Code Should Be ${expected_status_code}`,  () => pm.response.to.have.status(parseInt(expected_status_code)));\r",
							"\r",
							"// headers - JSON\r",
							"pm.test(\"Header includes type JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"const response_data = pm.response.json();\r",
							"\r",
							"if(pm.variables.get(\"should_pass\") === false) {\r",
							"    pm.test(\"Response Should Be\", function() {\r",
							"        pm.expect(response_data).to.have.property(\"error\", pm.variables.get(\"txt_error\"));\r",
							"        pm.expect(response_data).to.have.property(\"message\", pm.variables.get(\"error_api_category_name\"));\r",
							"    });\r",
							"    \r",
							"    // check that no skill has been added\r",
							"    postman.setNextRequest(\"Check empty DB - skills\");\r",
							"} else {\r",
							"    // check there's a category in the DB + delete it\r",
							"    postman.setNextRequest(\"Check created category\");\r",
							"    pm.environment.set(\"cat_name\", pm.variables.get(\"category_name\").substring(1, pm.variables.get(\"category_name\").length - 1));\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{valid_token_admin}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"category_name\": {{category_name}},\n\t\"is_shown\": {{is_shown}}\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/categories",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check empty DB - skills",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "757d142b-ce04-425d-925c-232325bae3b0",
						"exec": [
							"// status code 200\r",
							"const expected_status_code = 200;\r",
							"pm.test(`Status Code Should Be ${expected_status_code}`,  () => pm.response.to.have.status(expected_status_code));\r",
							"\r",
							"// headers - JSON\r",
							"pm.test(\"Header includes type JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"const response_data = pm.response.json();\r",
							"\r",
							"// keys and datatypes\r",
							"pm.test(\"Includes Keys and Datatypes\", function () {\r",
							"    pm.expect(response_data).to.have.all.keys(\"_links\", \"items\");\r",
							"    pm.expect(response_data).to.have.nested.property(\"_links.self\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"// values\r",
							"pm.test(\"Includes Empty Values\", function() {\r",
							"    pm.expect(response_data).to.have.nested.property(\"_links.self\", pm.variables.get(\"api_skills\"));\r",
							"    pm.expect(response_data.items).to.be.an(\"array\").that.is.empty;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{valid_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BASE_URL}}/skills",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"skills"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check empty DB - categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "03c357fb-179a-48dc-9728-371ac1d4a29e",
						"exec": [
							"// status code 200\r",
							"const expected_status_code = 200;\r",
							"pm.test(`Status Code Should Be ${expected_status_code}`,  () => pm.response.to.have.status(expected_status_code));\r",
							"\r",
							"// headers - JSON\r",
							"pm.test(\"Header includes type JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"const response_data = pm.response.json();\r",
							"\r",
							"// keys and datatypes\r",
							"pm.test(\"Includes Keys and Datatypes\", function () {\r",
							"    pm.expect(response_data).to.have.all.keys(\"_links\", \"items\");\r",
							"    pm.expect(response_data).to.have.nested.property(\"_links.self\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"// values\r",
							"pm.test(\"Includes Empty Values\", function() {\r",
							"    pm.expect(response_data).to.have.nested.property(\"_links.self\", pm.variables.get(\"api_categories\"));\r",
							"    pm.expect(response_data.items).to.be.an(\"array\").that.is.empty;\r",
							"})\r",
							"\r",
							"// no more requests\r",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{valid_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BASE_URL}}/categories",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check created category",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43fd2ce0-1272-4d69-8360-d70b69092684",
						"exec": [
							"const expected_status_code = 200;\r",
							"pm.test(`Status Code Should Be ${expected_status_code}`,  () => pm.response.to.have.status(expected_status_code));\r",
							"\r",
							"// headers - JSON\r",
							"pm.test(\"Header includes type JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"const response_data = pm.response.json();\r",
							"\r",
							"// keys and datatypes\r",
							"pm.test(\"Includes Keys and Datatypes\", function () {\r",
							"    pm.expect(response_data).to.have.all.keys(\"_links\", \"category_id\", \"category_name\", \"created\", \"is_shown\", \"skills\");\r",
							"    // nested keys\r",
							"    pm.expect(response_data).to.have.nested.property(\"_links.self\").that.is.a(\"string\");\r",
							"    pm.expect(response_data).to.have.nested.property(\"_links.next\").that.is.a(\"string\");\r",
							"    pm.expect(response_data).to.have.nested.property(\"_links.previous\").that.is.a(\"string\");\r",
							"    // datatypes\r",
							"    pm.expect(response_data.category_name).to.be.a(\"string\");\r",
							"    pm.expect(response_data.created).to.be.a(\"string\");\r",
							"    pm.expect(response_data.is_shown).to.be.oneOf([true, false])\r",
							"    pm.expect(response_data.category_id).to.be.a(\"number\");\r",
							"    pm.expect(response_data.category_name).to.be.a(\"string\");\r",
							"    pm.expect(response_data.skills).to.be.an(\"array\").that.is.empty;\r",
							"});\r",
							"\r",
							"// values\r",
							"pm.test(`Category ${pm.variables.get(\"category_name\")} Should Be Created`, function() {\r",
							"    pm.expect(response_data).to.have.nested.property(\"_links.self\", pm.variables.get(\"api_categories\") + \"/\"+ pm.variables.get(\"cat_name\"));\r",
							"    pm.expect(response_data).to.have.nested.property(\"_links.next\", pm.variables.get(\"NULL\"));\r",
							"    pm.expect(response_data).to.have.nested.property(\"_links.previous\", pm.variables.get(\"NULL\"));\r",
							"    pm.expect(response_data.category_name).to.eql(pm.variables.get(\"cat_name\"));\r",
							"    pm.expect(response_data.created).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/);\r",
							"    pm.expect(response_data.is_shown).to.eql(pm.variables.get(\"is_shown\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{valid_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BASE_URL}}/categories/{{cat_name}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"categories",
						"{{cat_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete category by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "365bf2aa-8821-4e5f-8768-10c13e8491c2",
						"exec": [
							"const expected_status_code = 200;",
							"pm.test(`Status Code Should Be ${expected_status_code}`,  () => pm.response.to.have.status(expected_status_code));",
							"",
							"",
							"const response_data = pm.response.json();",
							"",
							"pm.test(\"Response Should Be\", function() {",
							"    pm.expect(response_data).to.eql(JSON.parse(pm.variables.get(\"response_delete_json\")));",
							"});",
							"",
							"pm.environment.unset(\"cat_name\");",
							"",
							"// check everything has been deleted",
							"postman.setNextRequest(\"Check empty DB - skills\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{valid_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BASE_URL}}/categories/{{cat_name}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"categories",
						"{{cat_name}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "dc63b3e8-e0a3-4a89-a88f-f381f1415a52",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8c51f085-6bb4-4705-adc5-d79a4cbcc8f2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "e6c77694-5dcd-4b9b-b5cb-c2a6ff62fe73",
			"key": "category_name",
			"value": "\"1\"",
			"type": "string"
		},
		{
			"id": "79053cb8-9095-4ed4-a8da-1d28d1f7db75",
			"key": "is_shown",
			"value": "true",
			"type": "string"
		},
		{
			"id": "70677124-a31e-468e-a157-b6447602fc1b",
			"key": "should_pass",
			"value": "false",
			"type": "string"
		},
		{
			"id": "de9710ae-a4a5-4648-9151-c884bb749414",
			"key": "expected_status",
			"value": "400",
			"type": "string"
		}
	]
}